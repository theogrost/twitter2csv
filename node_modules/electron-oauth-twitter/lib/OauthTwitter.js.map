{"version":3,"sources":["../src/OauthTwitter.js"],"names":["AuthWindow","key","secret","consumerKey","consumerSecret","window","resolve","reject","options","force_login","authUrl","toString","oauth","deferredPromise","Promise","isResolved","value","error","getOAuthRequestToken","oauth_token","oauth_token_secret","results","url","getAccessToken","width","height","on","Error","webContents","event","matched","match","getOAuthAccessToken","oauth_access_token","oauth_access_token_secret","close","preventDefault","loadURL"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;AACA;;;;;;IAEqBA,U;AACnB,4BAA6B;AAAA,QAAfC,GAAe,QAAfA,GAAe;AAAA,QAAVC,MAAU,QAAVA,MAAU;;AAAA;;AAC3B,0BAAOD,GAAP,EAAY,+BAAZ;AACA,0BAAOC,MAAP,EAAe,kCAAf;AACA,SAAKC,WAAL,GAAmBF,GAAnB;AACA,SAAKG,cAAL,GAAsBF,MAAtB;AACA,SAAKG,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;;;mCAEwB;AAAA;;AAAA,UAAZC,OAAY,uEAAJ,EAAI;;AACvB,UAAMC,cAAcD,QAAQ,aAAR,KAA0B,KAA9C;AACA,UAAIE,sEAAoED,YAAYE,QAAZ,EAApE,kBAAJ;AACA,UAAIC,QAAQ,iBACV,6CADU,EAEV,4CAFU,EAGV,KAAKT,WAHK,EAIV,KAAKC,cAJK,EAKV,MALU,EAMV,IANU,EAOV,WAPU,CAAZ;;AAUA,UAAIS,kBAAkB,IAAIC,OAAJ,CAAY,UAACR,OAAD,EAAUC,MAAV,EAAqB;AACrD,YAAIQ,aAAa,KAAjB;AACA,cAAKT,OAAL,GAAe,UAACU,KAAD,EAAW;AACxB,cAAID,UAAJ,EAAgB;AACd;AACD;;AAEDA,uBAAa,IAAb;AACAT,kBAAQU,KAAR;AACD,SAPD;;AASA,cAAKT,MAAL,GAAc,UAACU,KAAD,EAAU;AACtB,cAAIF,UAAJ,EAAgB;AACd;AACD;;AAEDA,uBAAa,IAAb;AACAR,iBAAOU,KAAP;AACD,SAPD;AAQD,OAnBqB,CAAtB;;AAqBAL,YAAMM,oBAAN,CAA2B,UAACD,KAAD,EAAQE,WAAR,EAAqBC,kBAArB,EAAyCC,OAAzC,EAAqD;AAC9E,YAAIJ,KAAJ,EAAW;AACT,gBAAKV,MAAL,CAAYU,KAAZ;AACA;AACD;;AAED,YAAIK,MAAMZ,UAAUS,WAApB;AACA,cAAKI,cAAL,CAAoBX,KAApB,EAA2BO,WAA3B,EAAwCC,kBAAxC,EAA4DE,GAA5D;AACD,OARD;AASA,aAAOT,eAAP;AACD;;;mCAEcD,K,EAAOO,W,EAAaC,kB,EAAoBE,G,EAAK;AAAA;;AAC1D,WAAKjB,MAAL,GAAc,4BAAkB,EAAEmB,OAAO,GAAT,EAAcC,QAAQ,GAAtB,EAAlB,CAAd;AACA,WAAKpB,MAAL,CAAYqB,EAAZ,CAAe,OAAf,EAAwB,YAAM;AAC5B,eAAKnB,MAAL,CAAY,IAAIoB,KAAJ,CAAU,0DAAV,CAAZ;AACD,OAFD;AAGA,WAAKtB,MAAL,CAAYuB,WAAZ,CAAwBF,EAAxB,CAA2B,eAA3B,EAA4C,UAACG,KAAD,EAAQP,GAAR,EAAgB;AAC1D,YAAIQ,gBAAJ;AACA,YAAIA,UAAUR,IAAIS,KAAJ,CAAU,8CAAV,CAAd,EAAyE;AACvEnB,gBAAMoB,mBAAN,CAA0Bb,WAA1B,EAAuCC,kBAAvC,EAA2DU,QAAQ,CAAR,CAA3D,EAAuE,UAACb,KAAD,EAAQgB,kBAAR,EAA4BC,yBAA5B,EAA0D;AAC/H,gBAAIjB,KAAJ,EAAW;AACT,qBAAKV,MAAL,CAAYU,KAAZ;AACA;AACD;;AAED,mBAAKX,OAAL,CAAa;AACX2B,kCAAoBA,kBADT;AAEXC,yCAA2BA;AAFhB,aAAb;AAIA,mBAAK7B,MAAL,CAAY8B,KAAZ;AACD,WAXD;AAYD;;AAEDN,cAAMO,cAAN;AACD,OAlBD;AAmBA,WAAK/B,MAAL,CAAYgC,OAAZ,CAAoBf,GAApB;AACD;;;;;;kBAlFkBtB,U","file":"OauthTwitter.js","sourcesContent":["'use strict';\n\nimport assert from 'assert';\nimport { BrowserWindow } from 'electron';\nimport { OAuth } from 'oauth';\n\nexport default class AuthWindow {\n  constructor({ key, secret }) {\n    assert(key, 'OAuth Consumer Key is needed!');\n    assert(secret, 'OAuth Consumer secret is needed!');\n    this.consumerKey = key;\n    this.consumerSecret = secret;\n    this.window = null;\n    this.resolve = null;\n    this.reject = null;\n  }\n\n  startRequest(options={}) {\n    const force_login = options[\"force_login\"] || false\n    let authUrl = `https://api.twitter.com/oauth/authenticate?force_login=${force_login.toString()};oauth_token=`;\n    let oauth = new OAuth(\n      'https://api.twitter.com/oauth/request_token',\n      'https://api.twitter.com/oauth/access_token',\n      this.consumerKey,\n      this.consumerSecret,\n      '1.0A',\n      null,\n      'HMAC-SHA1'\n    );\n\n    let deferredPromise = new Promise((resolve, reject) => {\n      let isResolved = false;\n      this.resolve = (value) => {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        resolve(value);\n      };\n\n      this.reject = (error)=> {\n        if (isResolved) {\n          return;\n        }\n\n        isResolved = true;\n        reject(error);\n      };\n    });\n\n    oauth.getOAuthRequestToken((error, oauth_token, oauth_token_secret, results) => {\n      if (error) {\n        this.reject(error);\n        return;\n      }\n\n      let url = authUrl + oauth_token;\n      this.getAccessToken(oauth, oauth_token, oauth_token_secret, url);\n    });\n    return deferredPromise;\n  }\n\n  getAccessToken(oauth, oauth_token, oauth_token_secret, url) {\n    this.window = new BrowserWindow({ width: 800, height: 600 });\n    this.window.on('close', () => {\n      this.reject(new Error('the window is closed before complete the authentication.'));\n    });\n    this.window.webContents.on('will-navigate', (event, url) => {\n      let matched;\n      if (matched = url.match(/\\?oauth_token=([^&]*)&oauth_verifier=([^&]*)/)) {\n        oauth.getOAuthAccessToken(oauth_token, oauth_token_secret, matched[2], (error, oauth_access_token, oauth_access_token_secret) => {\n          if (error) {\n            this.reject(error);\n            return;\n          }\n\n          this.resolve({\n            oauth_access_token: oauth_access_token,\n            oauth_access_token_secret: oauth_access_token_secret,\n          });\n          this.window.close();\n        });\n      }\n\n      event.preventDefault();\n    });\n    this.window.loadURL(url);\n  }\n}\n"]}